plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.flywaydb.flyway' version '8.5.10'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
}

group = 'com.fiap.tech.challenge.infrastructure'
version = '1.0-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':domain')
    implementation project(':application')
    implementation('org.springdoc:springdoc-openapi-webmvc-core:1.6.14')
    implementation('org.springdoc:springdoc-openapi-ui:1.6.14')

    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    implementation ('org.springframework.boot:spring-boot-starter-web') {
        exclude module: 'spring-boot-starter-tomcat'
    }
    implementation 'org.springframework.boot:spring-boot-starter-undertow'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'com.fasterxml.jackson.module:jackson-module-afterburner'

    runtimeOnly 'org.postgresql:postgresql'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.flywaydb:flyway-core'
    testImplementation('org.testcontainers:testcontainers:1.17.2')
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/config/**'
            ])
        }))
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "fiap-g30_production"
        property "sonar.organization", "fiap-g30"
        property "sonar.host.url", System.getenv("SONAR_HOST_URL")
        property "sonar.login", System.getenv("SONAR_LOGIN")
    }
}

flyway {
    url = System.getenv('FLYWAY_DB') ?: 'jdbc:postgresql://localhost:5432/producao'
    user = System.getenv('FLYWAY_USER') ?: 'postgres'
    password = System.getenv('FLYWAY_PASS') ?: 'postgres'
}

bootJar {
    mainClass.set('com.fiap.tech.challenge.infrastructure.Main')
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}